from . import core

import os
import re
import threading

class WIFI(core.Menu):
    title = "WIFI"
    
    interface = "wlo1"

    def __init__(self, main, last=None):
        super().__init__(main,last)
        profiles = self.cmd("netctl list")[0]
        self.items = ["Scan", "Profiles:"]
        self.profiles = []
        for p in profiles:
            p = p.decode("utf-8")[2:-1]
            self.items.append("-"+p)
            self.profiles.append(p)
        if len(self.profiles)==0: self.items.append(" (none)")

    def run(self, n):
        super().run(n)
        if n==0: self.set_view(Scan)
        elif self.items[n]==" (none)": pass
        elif n>1: self.set_view(Profile, profile=self.profiles[n-2])

class Scan(core.Menu):
    title = "WIFI > Scan"
    Items = ["Rescan"]

    def __init__(self, menu, last=None):
        super().__init__(menu, last)
        self.scan()

    def scan(self):
        self.items = ["Scanning..."]
        self.thread = threading.Thread(target=self.scan_thread)
        self.thread.start()
    def scan_thread(self):
        (line_iterator, self.shell_proc) = self.cmd(f"ip link set {WIFI.interface} up; iw dev {WIFI.interface} scan")

        # Parser:
        nets = []  # Holds dictionaries
        net = {}
        skip = False  # If true, do nothing till next network
        reading_rsn = False  # If true, reading "RSN" section
        rsn = ""  # Holds "RSN" section as string
        for l in line_iterator:
            l = l.decode("utf-8")[:-1]
            if re.search("^\s", l) == None:  # Starting new network
                if "ssid" in net:
                    nets.append(net)
                    net = {}
                skip = False
            elif not skip:
                x = re.search("^\s*SSID: ", l)  # SSID parsed first because it is most dangerous
                if x != None:
                    ssid = l[x.span()[1]:]
                    if any([ n["ssid"]==ssid for n in nets ]):
                        skip = True
                        continue
                    net["ssid"] = ssid
                    continue

                x = re.search("^\s*signal: ", l)
                if x != None:
                    net["signal"] = l[x.span()[1]:-4]
                    continue

                x = re.search("^\s*RSN:", l)
                if x != None or reading_rsn:
                    reading_rsn = True
                    x = re.search("^\s*(RSN:)?\s*\*", l)
                    if x != None:
                        rsn += l[x.span()[1]:]
                    else:
                        reading_rsn = False
                        net["rsn"] = rsn
                        rsn = ""
                    continue

        # Final network completed:
        if "ssid" in net: nets.append(net)

        self.nets = nets
        for n in nets:
            if "rsn" in n: self.items.append("-(p)"+n["ssid"])
            else: self.items.append("-"+n["ssid"])
        self.items[0] = "Rescan"


    def run(self, n):
        super().run(n)
        if n==0:
            self.items = [self.items[0]]
            self.scan()
        else: self.set_view(Create_Profile, network = self.nets[n-1])

class Profile(core.Menu):
    items = ["Connect", "Enable", "Delete"]

    def __init__(self, main, last, profile):
        super().__init__(main, last)
        self.profile = profile
        self.title = "WIFI > "+profile

    def run(self, n):
        super().run(n)
        it = self.items[n]
        if it=="Connect": self.set_view(core.CMD_View, s=f"ip link set {WIFI.interface} down; netctl start '{self.profile}'")
        elif it=="Enable": self.set_view(core.CMD_View, s=f"netctl enable '{self.profile}'")
        elif it=="Delete":
            os.remove("/etc/netctl/"+self.profile) #TODO sanitize!
            self.set_view(self.last.__class__, last=self.last.last)

class Create_Profile(core.Menu):

    def __init__(self, main, last, network):
        super().__init__(main, last)
        self.network = network
        self.title = "WIFI > "+network["ssid"]

        self.items = ["Profile name", "Password", "OK"]
        if "rsn" not in network:
            self.items.remove("Password")
            self.sec = "none"
        else: self.sec = "wpa" #TODO handle others

        self.name = [network["ssid"]]
        self.password = ['']

    def run(self, n):
        super().run(n)
        it = self.items[n]
        if it=="Profile name": self.set_view(core.Input_View, name="Profile name", ref=self.name)
        elif it=="Password": self.set_view(core.Input_View, name="Password", ref=self.password)
        elif it=="OK": self.create()

    def create(self):
        try:
            f = open("/etc/netctl/"+self.name[0], "x") #TODO sanitize!

            f.write("Description='Generated by Raspscreen'\n")
            f.write(f"Interface={WIFI.interface}\n")
            f.write("Connection=wireless\n")
            f.write(f"Security={self.sec}\n")
            f.write(f"ESSID='{self.network['ssid']}'\n")
            if self.sec=="wpa":
                f.write(f"Key='{self.password[0]}'\n")
                """ Encrypted password:
                (line_iterator, self.shell_proc) = self.cmd("wpa_passphrase x "+self.password[0])
                for l in line_iterator:
                    x = re.search("^\s*psk=", l)
                    if x != None: f.write("psk="+l[x.span()[1]:]+"\n")
                """
                
            f.write("IP=dhcp\n")

            f.close()
            self.set_view(self.last.last.__class__)
            self.set_view(self.last.last.__class__, last=self.last.last.last) #TODO proper dialog
        except FileExistsError: #TODO proper error handling
            self.items.append("ERR: File exists")
